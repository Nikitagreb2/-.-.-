import sys
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from PyQt5.QtWidgets import (QApplication, QWidget, QVBoxLayout, QLineEdit, QPushButton, QLabel, QMessageBox)


class CoolingModelPlotter(QWidget):
    def __init__(self):
        super().__init__()

        self.init_ui()

    def init_ui(self):
        self.setWindowTitle('Процесс охлаждения тела')
        self.setGeometry(100, 100, 800, 600)

        self.initial_temp_input = QLineEdit(self)
        self.initial_temp_input.setPlaceholderText('Начальная температура T0 (°C)')

        self.environment_temp_input = QLineEdit(self)
        self.environment_temp_input.setPlaceholderText('Температура окружающей среды Tenv (°C)')

        self.coefficient_input = QLineEdit(self)
        self.coefficient_input.setPlaceholderText('Коэффициент теплообмена k (1/с)')

        self.plot_button = QPushButton('График', self)
        self.plot_button.clicked.connect(self.plot_cooling)

        self.figure = plt.figure()
        self.canvas = FigureCanvas(self.figure)

        layout = QVBoxLayout()
        layout.addWidget(QLabel('Введите параметры охлаждения:'))
        layout.addWidget(self.initial_temp_input)
        layout.addWidget(self.environment_temp_input)
        layout.addWidget(self.coefficient_input)
        layout.addWidget(self.plot_button)
        layout.addWidget(self.canvas)

        self.setLayout(layout)

    def plot_cooling(self):
        try:
            T0 = float(self.initial_temp_input.text())
            T_env = float(self.environment_temp_input.text())
            k = float(self.coefficient_input.text())

            if T0 < -273.15:  
                raise ValueError("Начальная температура должна быть выше абсолютного нуля (-273.15°C).")
            if T_env < -273.15:  
                raise ValueError("Температура окружающей среды должна быть выше абсолютного нуля (-273.15°C).")
            if k <= 0:  
                raise ValueError("Коэффициент теплообмена должен быть положительным.")

            time = np.linspace(0, 10, 100)  

            T = T_env + (T0 - T_env) * np.exp(-k * time)

            self.figure.clear()
            ax = self.figure.add_subplot(111)
            ax.plot(time, T, label='Температура тела', color='blue')
            ax.set_title('Процесс охлаждения тела по закону Ньютона')
            ax.set_xlabel('X - время (с)')
            ax.set_ylabel('Y - температура тела (°C)')
            ax.grid()
            ax.legend()

            ax.set_xlim(0, max(time))
            ax.set_ylim(min(T_env, T0) - 5, max(T_env, T0) + 5)

            self.canvas.draw()

        except ValueError as e:
            self.show_error_message(str(e))

        except Exception as e:
            self.show_error_message("Произошла ошибка: " + str(e))

    def show_error_message(self, message):
        """Показать сообщение об ошибке в диалоговом окне."""
        msg_box = QMessageBox()
        msg_box.setIcon(QMessageBox.Warning)
        msg_box.setText("Ошибка!")
        msg_box.setInformativeText(message)
        msg_box.setWindowTitle("Ошибка ввода")
        msg_box.setStandardButtons(QMessageBox.Ok)
        msg_box.exec_()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    plotter = CoolingModelPlotter()
    plotter.show()
    sys.exit(app.exec_())
